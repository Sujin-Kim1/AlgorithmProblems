"""
> https://www.notion.so/100-d0ee0ea183324aa8906e610161723c79

N x M으로 이루어진 아래와 같은 공간에 퍼즐이 쌓여져 있습니다.

퍼즐을 맞추기 위해서는 반드시 맨 오른쪽 줄로 이동시켜 줘야 합니다.
만약 종류가 같은 퍼즐이 연속될 시에 점수가 추가되며 그 퍼즐은 사라집니다.

점수는 다음과 같습니다.
- 파란색 공 : 1점
- 빨간색 공 : 2점
- 노란색 공 : 3점
- 초록색 공 : 4점
- 주황색 공 : 5점
점수는 공의 개수만큼 추가됩니다. 예를 들어 빨간색 공이 2개 연속되어 없어졌을 경우 2*2 = 4점입니다.

게임 플레이어는 게임이 시작되면 어떤 퍼즐을 이동할 것인지 모두 작성합니다.
만약 비어있는 곳을 선택하게 된다면 점수가 1점 감소하며 그대로 진행합니다.
위 규칙에 맞는 점수를 리턴하는 함수를 작성하세요.

예를 들어 입력이
퍼즐 판 : [[0, 0, 0, 0], [0, 1, 0, 3], [2, 5, 0, 1], [2, 4, 4, 1], [5, 1, 1, 1]]
조작 : [1, 1, 1, 1, 3, 3, 3]
일 경우, (그림 설명)
총 점수는 2점으로 2를 출력해야 합니다.

**입력**
퍼즐판 = [[0,0,0,0],[0,1,0,3],[2,5,0,1],[2,4,4,1],[5,1,1,1]]
조작 = [1,1,1,1,3,3,3]

**출력**
2
"""


# p: 퍼즐판, m: 조작
# 종류가 같은 퍼즐이 연속될 시 점수 추가와 함께 그 퍼즐은 사라지고,
# 비어있는 곳을 선택하면 1점이 감소하는 규칙에 맞춰 점수를 계산하여 반환한다.
def puzzle_game(p, m):
    score = 0
    height = len(p)
    stack = []  # 퍼즐을 저장할 리스트

    for move in m:
        # 리스트는 0번째 인덱스부터 시작하므로 1을 빼준다.
        move -= 1
        # 퍼즐의 높이만큼 돌면서 move 번째 줄에 퍼즐이 있는지 확인한다.
        for col in range(height):
            # 퍼즐이 있을 경우
            if p[col][move] != 0:
                # 연속된 공일 경우 점수를 추가하고 stack 에서 해당 공을 삭제한다.
                if stack and stack[-1] == p[col][move]:
                    score += stack.pop(-1) * 2
                # 연속된 공이 아니면 스택에 추가한다.
                else:
                    stack.append(p[col][move])
                # 공을 퍼즐판에서 제거한다.
                p[col][move] = 0
                break
            # 비어있는 곳을 선택한 경우 점수를 1점 감소한다.
            elif col == height - 1:
                score -= 1
    return score


if __name__ == '__main__':
    puzzle = [[0, 0, 0, 0],
              [0, 1, 0, 3],
              [2, 5, 0, 1],
              [2, 4, 4, 1],
              [5, 1, 1, 1]]
    moves = [1, 1, 1, 1, 3, 3, 3]
    print(puzzle_game(puzzle, moves))
